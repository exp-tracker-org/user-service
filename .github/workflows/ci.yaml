name: CI - User Service

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  lint-test-scan:
    name: Lint, Test, SAST & SCA
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.get_sha.outputs.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pytest bandit pip-audit httpx

      - name: Get commit SHA
        id: get_sha
        run: echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Run Lint
        run: |
          flake8 app/ || echo "Lint warnings present"

      - name: Run Unit Tests
        run: |
          mkdir -p reports
          PYTHONPATH=. pytest tests/ --junitxml=reports/test-results.xml

      - name: Run SAST (Bandit)
        run: |
          mkdir -p reports
          bandit -r app/ || true

      - name: Run SCA (pip-audit)
        run: |
          pip-audit || true

      - name: Upload reports
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: reports/
          
  build-and-deploy:
    name: Build & Deploy Docker Image  
    needs: lint-test-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 1: Build Docker Image (but do NOT push yet)
      - name: Build Docker Image
        run: |
          IMAGE=minnuantony/user-service
          SHA_TAG=$IMAGE:sha-${{ needs.lint-test-scan.outputs.sha }}
          LATEST_TAG=$IMAGE:latest
          docker build -t $SHA_TAG -t $LATEST_TAG .
          echo "SHA_TAG=$SHA_TAG" >> $GITHUB_ENV
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      # Step 2: Run Trivy scan on built image BEFORE pushing
      - name: Scan Docker Image with Trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.SHA_TAG }}
          format: 'table'
          severity: 'HIGH,CRITICAL'
          exit-code: '0'   # change to '1' if you want pipeline to fail on vulnerabilities

      # Step 3: Push Docker Image (only if scan passes or is allowed to continue)
      - name: Push Docker Image
        run: |
          docker push ${{ env.SHA_TAG }}
          docker push ${{ env.LATEST_TAG }}

      # Step 4: Update Deployment Manifest in k8s
      - name: Update Deployment Manifest
        run: |
          sed -i "s|image: .*|image: minnuantony/user-service:sha-${{ needs.lint-test-scan.outputs.sha }}|" ./k8s/deployment.yaml
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add ./k8s/deployment.yaml
          git commit -m "Update user-service image to sha-${{ needs.lint-test-scan.outputs.sha }}" || echo "No changes to commit"
          git push
